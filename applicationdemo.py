
# coding: utf-8

# In[85]:


#for other code optimisation purposes
import math
import datetime
from keras.models import load_model
import numpy as np
from sklearn.externals import joblib
import time


# In[86]:


model = load_model('my_model.h5')
scaler = joblib.load('scaler.save') 


# In[87]:



sample = [
     [ 0.87798231,  0.04339935,  0.0495349,   0.11814693,  0.10191641,  0.07619723,
  0.32604109,  0.18202581,  0.28907796,  0.3045506,   0.0266527,   0.01805766,
  0.   ,       0.   ,       0.00657895,0] ,
[ 0.71256317 , 0.20064883 , 0.2170261  , 0.35835373 , 0.19940826  ,0.14076912,
  0.42928352  ,0.12486316 , 0.50861706  ,0.47450186 , 0.21695402 , 0.16050152,
  0.          ,0.          ,0.10789474,0] ,
[ 0.72760992  ,0.32171329 , 0.3218695 ,  0.19385389 , 0.31164614,  0.20471722,
  0.47467533  ,0.16132511 , 0.73533702 , 0.39802674  ,0.28371181 , 0.15564247,
  0.     ,     0.     ,     0.20921053,0] ,
[ 0.66234969  ,0.30791199  ,0.34467447  ,0.48575494  ,0.45506691  ,0.20501846,
  0.50081934 , 0.27221154 , 0.51503829  ,0.13304898  ,0.41734507  ,0.2638258  , 0.,
  0.      ,    0.31052632,0] ,
[ 0.41743451  ,0.47940405 , 0.50896124 , 0.48097223  ,0.46132617 , 0.19552045,
  0.39573009,  0.48369221 , 0.49229576  ,0.50628346  ,0.66443901 , 0.24006564,
  0.         , 0.         , 0.41184211,0] ,
[ 0.38876543 , 0.29348556 , 0.55087947 , 0.90926065 , 0.49189328 , 0.31207656,
  0.41199421 , 0.23926996 , 0.50772439 , 0.70506152 , 0.66574071 , 0.18367529,
  0.         , 0.         , 0.51315789,0] ,
[ 0.65027326 , 0.37636842 , 0.51001265  ,0.44540316 , 0.63323104 , 0.34954974,
  0.65448355 , 0.18418339 , 0.39766148  ,0.60398069 , 0.74220713 , 0.19942649,
  0.         , 0.         , 0.61447368,0] ,
[ 0.35749512 , 0.40968941 , 0.60304569  ,0.69168337 , 0.30328965 , 0.38868114,
  0.47481204 , 0.35662955 , 0.58553241  ,0.8711312  , 0.72321857 , 0.23581321,
  0.         , 0.         , 0.71578947,0] ,
[ 0.18643481 , 0.84433133 , 0.40719541  ,0.42397397 , 0.52936018 , 0.30738931,
  0.55588698  ,0.16821181 , 0.48898851  ,0.04108952 , 0.79692203 , 0.47411209,
  0.          ,0.         , 0.81710526,0] ,
[ 0.23245056 , 0.83956058 , 0.53883921  ,0.86443161 , 0.62544797 , 0.73489713,
  0.56319668 , 0.16475157 , 0.50564267  ,0.71513937 , 0.92189894 , 0.50739885,
  0.         , 0.         , 0.91842105,0]
]


# In[88]:


print('Application has started! Loading...')
print('Ready to receive inputs')


# In[89]:


columns = ['blink_avg','blink_var','acc_avg', 'acc_var', 'stable_avg', 'stable_var', 'humid_avg', 'humid_var', 'temp_avg', 'temp_var', 'yawn_avg', 'yawn_var', 'disorder_avg', 'disorder_var', 'sec_avg', 'sec_var']


# In[90]:


for row in sample:
    time.sleep(1)
    curr_x = np.array(row).reshape((1,1,16))
    output = model.predict(curr_x)
    pre = np.array(list(curr_x[0][0])+ (list(output[0]))).reshape(1,17)
    curr_y = scaler.inverse_transform(pre)
    print('input:')
    string = ''
    for no in range(16):
        string += columns[no] + ':'
        string += str(round(curr_y[0][no],2)) + '|'
    print(string)
    level = 0
    warning = ''
    if curr_y[0][-1] <5:
        level = 1
        warning = '\033[1;32;40m SAFE   \033[0m'
    elif curr_y[0][-1] <8 :
        level = 2
        warning = '\033[1;33;40m OKAY         \033[0m'
    else:
        level = 3
        warning = '\033[1;31;40m WARNING! TAKE A BREAK!!!     \033[0m'
    print('output:' + str(level) + '(' + warning + ')')

